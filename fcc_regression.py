# -*- coding: utf-8 -*-
"""Fcc-Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xv-b0wBRxakleK0ugWeA7faDqRZoIR5K
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from imblearn.over_sampling import RandomOverSampler
from sklearn.preprocessing import StandardScaler
import copy
import seaborn as sns
import tensorflow as tf
from  sklearn.linear_model import LinearRegression

dataset_cols = ["bike_count", "hour", "temp", "humidity", "wind", "visibility", "dew_pt_temp", "radiation", "rain", "snow", "functional"]
df = pd.read_csv("SeoulBikeData.csv").drop(["Date", "Holiday", "Seasons"], axis = 1) #erase cols

df.columns = dataset_cols #rename cols
df["functional"] = (df['functional'] == "Yes").astype(int) #change srings to binary
df = df[df['hour'] == 12] #only take hour 12
df = df.drop("hour", axis=1)
df.head()

for label in df.columns[1:]:
  plt.scatter(df[label], df["bike_count"])
  plt.title(label)
  plt.ylabel("Bikes at Noon")
  plt.xlabel(label)
  plt.show()

df = df.drop(["wind", "visibility", "functional"], axis = 1)

df.head()

"""#Train, val, test"""

train, val, test = np.split(df.sample(frac=1), [int(0.6*len(df)), int(0.8*len(df))])

def get_xy(dataframe, y_label, x_labels=None):
  dataframe = copy.deepcopy(dataframe)
  if not x_labels:
    x = dataframe[[c for c in dataframe.columns if c != y_label]].values
  else:
    if len(x_labels) == 1:
      x = dataframe[x_labels[0]].values.reshape(-1, 1)
    else:
      x = dataframe[x_labels].values
  y = dataframe[y_label].values.reshape(-1, 1)
  data = np.hstack((x, y))

  return data, x, y

_, x_train, y_train = get_xy(train, "bike_count", x_labels=["temp"])
_, x_val, y_val = get_xy(val, "bike_count", x_labels=["temp"])
_, x_test, y_test = get_xy(test, "bike_count", x_labels=["temp"])

temp_reg = LinearRegression()
temp_reg.fit(x_train, y_train)

print(temp_reg.coef_, temp_reg.intercept_)

"""#Regression with NN"""

temp_normalizer = tf.keras.layers.Normalization(input_shape(1,), axis=None)