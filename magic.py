# -*- coding: utf-8 -*-
"""Magic.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kwZNGSFC-GIC1d0JG5_N4UFKm8XB8Iek
"""

import tensorflow as ts
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import RandomOverSampler

cols = ["fLength", "fWidth", "fSize", "fConc", "fConc1", "fAsym", "fM3Long", "fM3Trans", "fAlpha", "fDist", "class"]
df = pd.read_csv("magic04.data", names = cols)

df["class"] = (df['class'] == 'g').astype(int)
df

for label in cols[:-1]:
  plt.hist(df[df['class'] == 1][label], color="blue", label="gamma", alpha=0.7, density= True)  #get the labels of the rows with 1
  plt.hist(df[df['class'] == 0][label], color="red", label="hadron", alpha=0.7, density= True)
  plt.title(label)
  plt.ylabel("Probability")
  plt.xlabel(label)
  plt.legend()
  plt.show()

"""Train, validation, test."""

train, valid, test = np.split(df.sample(frac=1), [int(0.6*len(df)), int(0.8*len(df))])

def scale_dataset(dataframe, oversample=False):
  x = dataframe[dataframe.columns[:-1]].values
  y = dataframe[dataframe.columns[-1]].values

  scaler = StandardScaler()
  x = scaler.fit_transform(x)

  if oversample:
    ros = RandomOverSampler()
    x, y = ros.fit_resample(x, y)  #take from the one with less until is equal

  data = np.hstack((x, np.reshape(y, (-1, 1))))  #reshape y to make it 2D because x is 2D and numpy is veri particular about shape and size

  return data, x, y

print(len(train[train["class"] == 1]))
print(len(train[train["class"] == 0]))
#More gamas (7000) than hadrons (4000) so we apply oversample to "train"

train, x_train, y_train = scale_dataset(train, oversample=True)
valid, x_valid, y_valid = scale_dataset(valid, oversample=False)
test, x_test, y_test = scale_dataset(test, oversample=False)

"""# NK Neighbors"""

from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import classification_report

knn_model = KNeighborsClassifier(n_neighbors=3)
knn_model.fit(x_train, y_train)  #fit x and y into the kn model

y_pred = knn_model.predict(x_test) #prediction of x_text should give y_test

y_pred

y_test  #predicted 5 out of 6

print(classification_report(y_test, y_pred))

"""# Naive Bayes"""

from sklearn.naive_bayes import GaussianNB

nb_model = GaussianNB()
nb_model = nb_model.fit(x_train, y_train)

y_pred = nb_model.predict(x_test)
print(classification_report(y_test, y_pred))

"""# Linear Regression"""

from sklearn.linear_model import LogisticRegression

lg_model = LogisticRegression()
lg_model = lg_model.fit(x_train, y_train)

y_pred = lg_model.predict(x_test)
print(classification_report(y_test, y_pred))